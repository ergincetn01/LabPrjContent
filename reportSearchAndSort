Project Work Report
Ergin ÇETİN 2019556021 / Evening Education
Search
I created a function “search_in_file”. In its scope, I created a file pointer “filePtr_100K”. If the file succesfully opened, I check each line by incrementing operation for ‘line’ named variable’s value, at the same time with the help of “indexOf” function, I checked the index of the current word that pointing by my ‘filePtr_100K’. indexOf: (file pointer, a string to search, line pointer, column pointer). I took the advantage of a pointer named “posPtr” which points the occurance of the searching key to lines in txt file. For any possible substring issue, ‘col’ pointer takes part. I used <time.h> for time calculation and <string.h> for string manipulation. For each searching, I printed the time duration to the screen.
                                       Sort
I created a 2-dim. ‘storeArray’ to store the file content and filePtr_10K for file handling. To scan lines into my storeArray, I utilized from “fscanf” function and a ‘for loop’ to scan each line to one element space of storeArray. As counter value increases, one line of file content is written into next element of storeArray. At sorting the array content, I used bubble sort for chars. It takes 2 parameters, 2-dimensional array and the limit size.  In its scope, I created a temporary 2-dimensional array to compare with current elements of storeArray. With the help of 2 nested for loops, I checked each string’s current index and next index’s ascii values with strcmp and strcpy functions of <string.h> library. strcmp decides which character will come earlier, strcpy handles assigning of char arrays. I displayed first 100 elements in ascending order and last 100 elements in descending order of sorted form. I calculated the time duration for sorting and printed to the screen.
Hashing
I created 2 global char typed arrays “store1Karray”. I stored file content in ‘store1Karray’. For this I utilized file pointer and fscanf function. In order to convert strings into integer value, hashVal, I used function ‘hash’ with ‘pow’ function of <math.h> library. ‘hash’ function returns hashVal, so that I could use it in my insert function.  It allows to insert if the data we want to place in is not already present, and size of table is not exceeded. After initializing hash table as empty, I read the file and stored in ‘store1Karray’, then performed the insertion operation. After all, I displayed the hash table to the screen. But unfortunately, I could only operate with first element of store array.
Linked List
I created a global 2-dim. char array ‘storeForList’, struct for node operations ‘struct node’ and used a function to convert the array to linked list ‘arrayToList()’. With pointer ‘LL_filePtr_1K’ and fscanf function I read the data into the store array. Inside arrayToList function, I formed 3 pointers from struct named head, temp and current. Then, I handled the controls and assignments. In a for loop, dynamically allocated the temp and stored each i.th element of array in every individual node of linked list data. 
 
