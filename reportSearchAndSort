Project Work Report
Ergin ÇETİN 2019556021 / Evening Education
Search
For searching objective, I manipulated the file reading with a void function which I named as “search_in_file”. In its scope, I created a file pointer named “filePtr_100K”. This pointer point to ‘100000.txt’ file from ‘10-million-password-list-top’ folder. I made the function check whether the aimed file can be accessed/opened successfully or not. If no, it displays a message to user and then exits the program. Otherwise, if succesfully accessed, I check each line by decrementing operation for ‘line’ named variable’s value, at the same time with the help of “indexOf” named function.
With indexOf function, I check the index of the current word that being pointing by my ‘filePtr_100K’. IndexOf function takes 4 parameters: 
=> indexOf (file pointer, a string to search, line pointer, column pointer)
I took the advantage of a pointer named “posPtr” which points the first occurance of the searching key to lines in txt file. For any possible substring problem I created the pointer for column check named ‘col’. For searching, I used <time.h> for time calculation and <string.h> for string manipulation.
Sort
For sorting, with a file pointer named “filePtr_10K” I performed the file manipulation. I created a 2-dimensional array to store the file content which I named ‘storeArray’. First dimension indicates rows, i.e number of lines in file; second dimension indicates length of each line. For getting/scanning lines into my storeArray, I utilized from “fgets ()” function wihch takes 3 parameters as I show in next sentence in sequence: 
=> fgets (name of array to store file data, number of elements to get, name of file pointer)
I used a ‘for loop’ to be able to scan each line to one element space of storeArray. As much as counter value increases, one line of file content is written into next element of storeArray.
At sorting the array content, I used bubble sort for chars. It takes tow parameters, 2-dimensional array and the limit size.  In its scope, I created a temporary 2-dim. Array to compare with current elements of storeArray. With the help of 2 nested for loops I checked the conditions with strcmp and strcpy functions of <string.h> library. They check the each string’s current index and next index’s ascii values and decide which one will come earlier.  I displayed first 100 elements in ascending order and last 100 elements in descending order after sorting the ‘storeArray’.


 
