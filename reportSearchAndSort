Project Work Report
Ergin ÇETİN 2019556021 / Evening Education
Search
I performed the file reading with “search_in_file” function. In its scope, I created a file pointer named “filePtr_100K”. This pointer point to ‘100000.txt’ file from ‘10-million-password-list-top’ folder. I made the function check whether the aimed file is accessed/opened successfully or not. If no, it displays a message to user and then exits the program. If succesfully accessed, I check each line by incrementing operation for ‘line’ named variable’s value, at the same time with the help of “indexOf” function, I check the index of the current word that being pointing by my ‘filePtr_100K’. indexOf: (file pointer, a string to search, line pointer, column pointer). I took the advantage of a pointer named “posPtr” which points the occurance of the searching key to lines in txt file. For any possible substring problem I created the pointer for column check named ‘col’. For searching, I used <time.h> for time calculation and <string.h> for string manipulation. For each searching, I printed the time duration to the screen.
                                       Sort
With“filePtr_10K” I performed the file handling. I created a 2-dim. ‘storeArray’ to store the file content. 1st dimension shows number of lines in file; 2nd dimension shows length of each line. To scan lines into my storeArray, I utilized from “fscanf” function. I used a ‘for loop’ to be able to scan each line to one element space of storeArray. As counter value increases, one line of file content is written into next element of storeArray. At sorting the array content, I used bubble sort for chars. It takes 2 parameters, 2-dimensional array and the limit size.  In its scope, I created a temporary 2-dimensional array to compare with current elements of storeArray. With the help of 2 nested for loops, I checked the conditions with strcmp and strcpy functions of <string.h> library. They check the each string’s current index and next index’s ascii values and decide which one will come earlier.  I displayed first 100 elements in ascending order and last 100 elements in descending order after sorting the ‘storeArray’. I calculated the time duration for sorting and printed to the screen.
Hashing
For hashing, I created 2 global char typed arrays “store1Karray”. I stored file content in ‘store1Karray’. For this I utilized file pointer and fscanf function. In order to convert strings into integer value, hashVal, I used hash function ‘hash(char* key)’. Pow function of math.h library helped me calculate hashVal. hashVal is returned with ‘hash( )’ so that I could use it in my insert function.  It allows to insert if the data we want to place in table not already present, and we have not exceeded the size of table. After initializing hash table as empty, I read the file and stored in ‘store1Karray’, then performed the insertion operation. After all, I displayed the hash table to the screen. But unfortunately, I could only operate with first element of store array.


